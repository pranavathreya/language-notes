single : used for constructors
Account::Account(): balance(0){}

vector<string> Account::Report()
{
	vector<string> report;

	report.push_back....
}

bool Account::Deposit(int amount)
{
	log.push_back(Transaction(amount, "Deposit"))
}

// Declare objects
Account acct;
Transaction t(amount, type); 
Transaction t{amount, type};

- try not to use = when initalizing


- Encapsulation is more for surviving change than security

- make -f changesonly

- casting:
	- i = static_cast<int>(d);
	- Make your intent obvious; write EXPRESSIVE code

	- const:
		- void display(Transaction& const t);

- Don't use "using namespace std", especially in a header file. Better to use "using std::string;"

- scoped enums (enum class) >> enums

- If you have a compiler error, look in your header file.

- If you have a linker error, look in your .cpp file.

- && || ! are BOOLEAN operators; all operands are converted to Bool.

- operator overload syntax:
	- MyObject < Something:
		- bool MyClass::operator<(OtherType something)
	- Something < MyObject:
		- bool operator<(OtherType something, MyClass mc)

- templates:
	- resolved at compile time instead of runtime; speeds runtime up a lot
		- no runtime hit
	- much of standard library is template-based
	- eg:
	template <class T>
	T max(T const& t1, T const& t2)
	{
		return t1 < t2? t2 : t1;
	}
	// Note: if u didn't use const&, u wouldn't be able to pass in literals like zero.
	- compiler may deduce the type you're using:
		- max(33, 44)
		- max(x, 0)
		- max<double>(33, 2.0)
			//will return double since you specified.
	- template specialization is very helpful

- references:
	- an alias; another word for the same thing
	- cannot rebind it
	- 
	int a = 3;
	int& rA = a;

- pointers:
	- have type-safety
	- can point nowhere:
		- null pointer
		- "nullptr" keyword
	- can be rebound
	- eg:
	int* pA = &A;
	int *pA = &A;
	
	- *pA = 5; // To get through the pointer to its target
	- eg:
	Person Kate("Kate", "Gregory", 234);
	Person* pKate = &Kate;
	name = (*pKate).GetName();
	name = pKate->GetName();
	
	- pointer to a const vs const pointer:
		- int const* pcI = pI;
		- int* const cpI = pI;
	
- const & indirection:
	- way to tell the compiler that you won't change anything
	- "const correctness from the beginning":
		- When you write functions and variables, decide then and there whether to use const.
		- member functions should be const unless needed.
		- try to take all refparms by const reference.
	- const: before or after? use after:
		- int const c = 3;
	- 

- memory management:
	- smart pointers mean you don't have to do memory management yourself
	- local variables are on the stack i.e local storage
	- free store is basically the 'heap' which is C jargon
	- The Free Store or Stack:
		- for longer-lived variables
		- how to get memory from here:
			- use new operator
			- memory will be allocated and you'll get a pointer in return
			- constructor will be run to initialize the objects
			- call delete on the object which will free and destruct
		- Manual memory management sux ballz
		
	- Rule of Three:
		- if you have a pointer, keep that pointer in an object
		- therefore, the destructor will call delete on the ptr once outta scope
		- when someone makes a copy of the object, write a copy constructor for obj a = b;
		- make a copy assignment operator for a = b;
	
	- Rule of Five:
		- fuck this
	
	- Rule of Zero:
		- best rule
		- design your class so you don't need any of these
		- use stack or value semantics
	
	- Easy Memory Management:
		- Handle copy and move:
			- Prevent it (private or deleted copy constructor and copy assignment operator)
			- Deep copy
			- Shallow copy with reference count
		- C++11 has smart pointers that prevent copying and also offer shallow copying:
			- unique_ptr
				- noncopyable (use std::move)
				- low-overhead
			- shared_ptr
				- copyable
				- reference counted
			- weak_ptr
				- lets you peek at a shared_ptr without bumping the reference count

		- make_shared is the best way to make unique_ptr's
		- shared_ptr has its own destructor for clean up

- Inheritance and Indirection:
	- Given a base class reference:
		- if function is virtual, derived class function executes (polymorphism)
			- performance-hit
		- if nonvirtual, base class function executes
		- compiler can't see derived-class functions unless you override
	- A "pointer to a base class" may point actually to a derived class instance:
		- any base class function can be called thru the pointer and the virtual/non-virtual rules apply as well.
	
	- Same rules apply to smart pointers.

- Slicing:
	- happens if you copy objects:
		- eg: copying a derived object into a base object, dropping derived members
	- happens when passing to a function by value since a copy is made
	- therefore, references or pointers to avoid slicing
	
- Casting and Indirection:
	- very expressive.
	- static_cast<type>:
		- happens at compile time
		- up to you to be sure it's safe
	- dynamic_cast<type>:
		- does a runtime check
		- relies on a virtual table i.e works only when casting a pointer to a class with a virtual table
		- returns null if cast fails
		- slower but safer
	- other cast operators:
		- const_cast (not modern)
		- reinterpret_cast (not a beginner technique; for bit twiddling)
	- "do i have this Person* really pointing to a Tweeter?"
		- you can test this by dynamic_cast'ing to a Tweeter* and accessing Tweeter members
		- if it succeeds then great!
		- you have that ability in runtime.


Giovanni Dicanio I:
	Automatic Return Type Deduction:
		- auto keyword
		auto AreaOfSquare(double side) {
			return side*side;
		} // better to be explicit with type in a simple case such as this
		
		- complex case:
			auto ComplexFunctionTemplate(...) {
				// Complex template code...
				return result;
			} // In this case being type-explicit will be very cumbersome coz of templates
		
			auto BuildCoolMap() {
				std::map<std::string, SomeLongValueType> result;
				// Fill the result map object...
				return  result;
			} // Only need to specify the return type once in this case: during declaration of result.
		- Trade off between looking inside the func impl vs not having repeated type information


	Misc Improvements to C++11 in 14 & 17:
		- Relaxed constexpr functions:
			- two time periods: 
				- run time: when CPU is executing the program
				- compile time: translation process of .cpp source code to executable binary file
					- syntax checks happen
				- some computations can be done in compile time to gain runtime performance:
					- result already available in exec binary file
					- ordinary functions are executed in run time
					- constexpr functions are executed at compile-time
						constexpr doulbe DoSomething() {
							...
						}
					- 11 had several restrictions on these constexpr functions like not having if or for statements
					- In 14, you can. In fact, you can declare local variables and if, switch, for while etc.
					- use static_assert to verify constexpr results
				
		- variable templates:
			template <typename T>
			constexpr T pi = T(3.14159);
			
			- pi<float> vs pi<double>
			- you can specialize variable templates too
			
			template <typename T>
			constexpr T maxValue = T(1000);

			template <>
			constexpr double maxValue<double> = 2000;

			template <>
			constexpr char maxValue<char> = 'Z';

			int main() {
				cout << " maxValue<int>    :" << maxValue<int> << endl;
				cout << " maxValue<double> :" << maxValue<double> << endl;
				cout << " maxValue<char>   :" << maxValue<char> << endl;
			}

		
		- [[deprecated]] attributes:
			- sends warnings when code uses deprecated functions
			[[deprecated("DoSomething is inefficient. Use DoSomething2 instead."]]
			void DoSomething() {
				...
			} // compiler warning


	Standard Library Improvements:
		- stack memory is like a scratch pad:
			- very fast allocations; just increasing a pointer
			- but limited amount of space
		- heap memory:
			- can serve much larger chunks of memory
			- slower allocations:
				- making a request to the OS memory manager
			- use "new" keyword:
			double* p = new double[1000000]; // also called dynamic allocation
			- memory lifecyle:
				- allocate with new[]
				- use
				- allocated memory must be released
					delete [] p;
					p = nullptr; // Avoid dangling references
					
		- make_unique and smart pointers:
			- unique_ptr:
				- no need to explicitly release memory; release as soon as scope is left.
				- how to make one:
					#include <memory>
					auto p = std::make_unique<double[]>(1000000);
				- you should have no explicit calls to new and delete
		
		- Standard-defined literals:
			- time intervals with proper units:
				sleep(20); // what are the units??? satellite got fucked coz of this
			- use:
				sleep(20ms);
			- standard chrono library:
				#include<chrono>
				using namespace std::chrono
				- time duration classes:
					- hour, minutes, .. , nanoseconds
					- can do conversions:
						seconds s{}; // 0-initialized
						seconds s; // No initialization just like int
						seconds s{10}; // 10 seconds
						seconds s = 10; // Will not compile
						auto s = 10s; // 10 seconds (C++14!); auto deduces chrono::seconds
			- standard defined literals:
				-   h : hours
				- min : minutes
				-   s : seconds
				-  ms : milliseconds
				-  us : microseconds
				-  ns : nanoseconds
			
			- deducing strings:
				auto s = "Connie"; // deduced as const char*
				auto s = "Connie"s; // use s-suffix and will be deduced as std::string
				auto y = 10s; // deduced as std::chrono::seconds
				
			- chrono's automatic conversions happen at compile-time
			
		- Fetching items from tuples by types
			- std::tuple intro'd in c++11:
				- fixed collection of heterogeneous values
				- #include <tuple>
				- tuple is a generalization of std::pair
			- fetching:
				- std::get<2>(student); // fetch by index
				- std::get<double>(student); // fetch by type
					- compiler error if more than one element of the same type


	Better Lambdas:
		- Quick intro/refresher on lambdas
			- Unnamed function
			[](int a, double b) {
				// Do something ...
			}
			
			vector<string> names{
				"Mike", .. "Connie"
			};
			
			sort(begin(names), end(names)); // designed in an extensible way with a custom rule
			// Can bascically pass in a function to define the rule
			
			bool compare(string const& a, string const& b) {
				a.length() < b.length();
			}
			
			sort(begin(names), end(names), compare); // conventional since C++98
			
			sort(begin(names), end(names),
 				{
					return a.length() < b.length();
				}
			}; // with lambda function
		
		- Generic or Polymorphic lambdas:
			- What if: vector<unique_ptr<MyCoolClass>>
			- Just use: auto!!
			
			sort(begin(names), end(names),
				[](auto const& a, auto const& b)
				{
					return a.length() < b.length();
				}
			};
			
		- Init-capture:
			- This lambda captures nothing:
			[](auto const& a, auto const& b)
			{
					return a.length() < b.length();
			}

			- Variables declated outside the lambda are imported inside it
			int x{...};
			double y{...};		
			[x, y](auto a, auto b) // x and y passed by value
			{
				// Do something
			}
			
			[x, &y](auto a, auto b) // y passed by reference
			{
				// Do something
			}
			
			[x, y, value = 64](auto a, auto b) // init capture
			{
				...
			}
			
			- Movable non-copyable using std::move:
				unique_ptr<X> p1{..};
				unique_ptr<X> p2;
				
				p2 = std::move(p1);
			
			- Using unique_ptr's in init-capture:
				unique_ptr<X> p{..};
				unique_ptr<X> u;

				[ u{move(p)} ]( /* parameters */)
				{
					// Do something
				}

	Practical Convenient C++17 Language Improvements
		- nested namespaces:
			- Prior to 17:
				namespace PluralsightEngine
				{
					namespace Graphics
					{
						namespace Rendering
						{
							class OpenGLRender
							...
						}
					}
				}
			- After 17:
				namespace PluralsightEngine::Graphics::Rendering
				{
					class OpenGLRender
					...
				}
		- variable declarations in if and switch:
			- find and replace strings:
				- This code will throw a compiler error for "it" being defined twice
					vector<string> names{ /* Some names .. */ };
					
					// Find and replace "Connie" with "***"
					const auto it = find(begin(names), end(names), "Connie");
					if ( it != end(names))
					{
						*it = "***";
					}
					
					// Find and replace "C64" with "**"
					const auto it = find(begin(names), end(names), "C64");
					if (it != end(names))
					{
						*it = "**";
					}
					
				- Getting around this with C++17
					if (const auto it = find(...); it != end(names))
					{
						*it = "**";
					} else
					{
						*it = "LMFAO"; // it also available in else scope
					}
				
				- Using this in switch:
					switch (auto val = GetSomeValue(); expression for switch)
					{
						Various cases...
					}
					
				
				
		- if constexpr:
			if constexpr (condition)
			{
				// Do something
			} else
			{
				// Do something else
			}
			
			- constexpr is useful in template based cpp code.
			template <typename T>
			auto DoSomething(T const& value)
			{
				if constexpr (T is an int) // expr evaluated at compile time, assume it evaluates to true
				{
					// Do something with integers... // The <<true>> block is compiled
				} else
				{
					// Do something else... // compiler ignores this block => performance gain
				}
			}
			
			- in an ordinary if, when template type resolution is done during compile time, the if block has a special requirement that both the if and else sublocks must be compilable. In the below example, if value happens to be resolved as an int during compile time, there will be a compiler error stating that value.length() can't be called if value is an int. The way to get around this is "constexpr if"
			if (is_integral<T>::value)
			{
				return value;
			} else {
				return value.length();
			}
			
			Both "return value" AND "return value.length()" must compile 

		- Structured Bindings:
			auto [var1, var2, ...] = GetSomeData();
		
			- practical application:
				auto [position, success] = italianDictionary.insert(
											{"sedia", "chair"});

C++17: Beyond the Basics
	- Modern C++:
		- weak_ptr
	
	- Standard Library Containers:
		- use these instead of arrays
		- eg: vectors
		- work great with stl::algorithms
		- advantage is that they know their size
		- container destructs:
			- vector of pointers won't call delete on those pointers those
			- unless you create a vector of smart pointers
		- you can simply add elements to the collection without having to worry about allocating new memory
		- you enjoy type safety; protects you from errors of thought
		- Vector performance is better than you think:
			- Keeps elements consecutive in memory
			- Random access is possible (and fast)
			
		- Vectors that never grow or std::array:
			- don't have to rely on heap
			- eg: 12 elements, one for each month
			- use std::array for this
			
		- linked list or std::list:
			- implements a linked list i.e each element knows where to find the next element
			- inserting elements just requires interaction with a few elements
			- as easy to use as vector
			- less copying
			- more expensive to traverse 
		
		- know your collections:
			- use array if you know collection size
			- map is kept sorted and keys must be unique
			- multimap allows collisions
			- unordered_*map's allow collections
			- stack, queue, dequeue, priority_queue
		
		- summary:
			- always start out with vector
			- measure performance using steady_clock::now()
			- Write your code to make witching containers easy:
			- auto
			- begin() and end()
			- Algorithms
	
	- Lambdas:
		- they're expressions
		- holds code; 'represents doing something'
		- For generic work
		- For functional style
		- For concurrency
		- For readability
			- Eliminate tiny functions
			- No need to use filthy function pointers
		
		- Tiny Functions:
			auto isOdd = [](int candidate) {return candidate % 2 != 0; };
			- You have to use auto, no way you can determine the type of a lambda bucko
			
			bool is3Odd = isOdd(3);
			etc..
			
			vector nums { 2,3,4,-1,1 };
			int odds = std::count_if(begin(nums), end(nums), isOdd);
		
		 - Compiler generates an anonymous function object
			- This overrides the ( operator. Parameters in the (),
				Return type after the ->
			- All member variables are const by default, determined by the capture clause
		
		- The Capture:
			- [x,y] - capture by value
				- lambda can be used even when x and y have gone out of scope since copies have been made
			- [&x,&y] - capture x and y by reference
				- No copies, changes affect the originals
				- Dangling references may be an issue so be aware of the scopes of x and y
			- [x=a+1,y=std::move(b)] - alias or move capture
				- Useful when you need it
			- [=] - copy "everything" by value
				- Only copies everything used in the body of the lambda
			- [&] - copy "everything" by reference
				- Again, only what's used
			- Mutable keyword:
				- Allows you to change values captured by value
			- Lambda not stored => capture by value/reference
			- Lambda stored => capture by value
			- As much as you can, use the "everything" notation
		
		- Return Value:
			- May return a value
			- sometimes only a return statement
			- syntax for return type:
				[](int n) -> double {...}
		
		- Parameters:
			- Generally imposed by the place you are using it in
			- Like writing any other predicate
		
		- Syntactic Sugar:
			- Lambdas keep the code where it is used
		
		- Summary:
			- Lambdas make for_each and STL functions suddenly usable
			- They open the door for interesting work
			- C++ lambdas offer more control than other languages
				- capture by value/reference
			
			
			

- BEST PRACTICE to: 
	- use const& when passing by reference because from the calling scope, you cannot be sure that reference you're passing will be unaltered.
	
	- mark member functions as const unless you know they're gonna change a member variable. This is very useful for compiler optimization and human reading.
	
	- Use friend keyword only when you NEED to.
	
	- Use references first, then consider pointers.
	
	- Functions that take literal values need to be aware of const
	
	- if you take a reference for speed, you should take a const reference
	
	- NOT USE new OR delete. Just use smart pointers.
	
	- not use protected variables; will be headache tracking what changed your base class members. Much better to completely encapsulate base class.
	
	- as soon as you have ONE virtual function, make sure your destructor is virtual
	
	- use pointers and refs help you avoid slicing.
	
	- ALWAYS put const after the type:
		int const ci = 5;
	
	